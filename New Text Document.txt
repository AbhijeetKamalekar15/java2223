>>Swing:
    Swing is a set of classes that provides more powerful and flexible GUI components than does the AWT. Simply puts swings provides the look and field of the modern java GUI
    Swing did not exist in the early days of java rather it was a response to the diffiencies present in java's original GUI subsisting. The AWT defines basic set of controls, windows, and dialogs boxes that support a usable, but limited graphical interface. One reason for limited nature of the AWT is that it translates its various visual componets into there corresponding platform specific -----------this means that the look and field of a component is defined by the platform and not by java. Because the AWT components use native code resources, they are refered to as heavy weigth.
    The use of native peers lead to several problems 1.Because of variations between operating systems , a component might look or even act differently on different platforms. This potential variablity threatened the overarching phylosophy of java. Write once znd run anywhere.2. The look and field of each component was fixed (Because it is defined by the platform and could not be easily changed) 3. The use of heavy weigth components caused some frustating restrictions e.g. heavy weigth componts are always rectangular or opace. 

Swing is built on the AWT:
    Although swing elimites a number of the limitations inherant in the AWT, swing does not replace it. Instead swing is builton the foundation of the AWT this is why the AWT is the crusual part of the java. Swing also uses the same event handling mechanism as the AWT . Therefore the basic understanding of the AWT is required to use swing.
    To key swing features:
    Swing was created to address the limitations presnt in the AWT.It does this through two key features. Ligth weight components and plugable look and field. 
a)Swing component are lightweight:
    With very few exceptions swing components are lightweight . This means that they are written entirely in java and do not map directly to platform specific peers. Beacuse lightweight component are rendered using graphics premitives, they can be transparent which enables non-rectangular shapes. Thus lightweight components are more efficient and more flexible. These componets do not translate into native peers, the look and field of each component is determined by the swing not by the OS. This means that each component will work in the consistent manner across all platforms.
b)Swing a plugable look and field:
    swing supports a plugable look and field (plaf) Beacuse each componets is rendered by java code rather than native peersthe look and the field of the component is under the control of swing means it is possible to seperate the look and field of the component from the logic of the component and this is what swing does. Seperating out the look and field provides a significant advantage : it becomes possible to change the way that a component is rendered without affecting any of its other aspects. In other words it is possible to plug in a new look and field for any given component without creating any side effects in the code that uses the component. Moverever it becomes possible to define entire set of look and feel that represent different GUI styles. To use a specific style its look and feel is simply pluged in. Once this is done all components are automatically rendered using this style. 
    Plugable look and field offers several important advantages. It is possible to define a look and feel there is consistent along all platforms. Conversely it is possible to create a look and feel that acts like a specific platform e.g. it we know that an application will be running only in windows environment it possible to specify the windows look and feel. It is also possible to design custom look and feel. Finally the look and feel can be changed dynamically at the runtime.(the metal look and feel is the default look)